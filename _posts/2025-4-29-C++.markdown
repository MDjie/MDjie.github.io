---
layout: post
title: "C++ basic"
date: 2025-04-29 09:23:46 +0800
category: jekyll update
---
# C Plus Syntax
## Basic Gramma
### 参数传递机制：
#### 值传递
基本类型的参数传递都为值传递
### 重载算数符号
返回值 operator*(+ - ?...){
...
}

## STD package
### Tools

#### tuple
可以存储 任意数量 的不同类型值（C++11+ 支持）

    tuple<int, string, double> t = {1, "apple", 3.14};
    // 访问元素（使用 std::get）
    cout << get<0>(t); // 输出 1（索引从 0 开始）
    cout << get<1>(t); // 输出 "apple"
    cout << get<2>(t); // 输出 3.14

#### auto
auto 让编译器自动推导变量类型，简化代码（尤其是迭代器和长类型名）
典型场景：
遍历容器：

    for (auto x : v) cout << x;       // 值拷贝
    for (auto& x : v) x *= 2;        // 引用修改
    for (const auto& x : v) cout << x; // 只读引用

简化复杂声明

    auto p = make_pair(1, "apple"); // pair<int, string>
    auto t = make_tuple(1, 2.0, "three"); // tuple<int, double, string>

### 容器

####  priority queue
 ```
#include <queue>
#include <tuple>
using namespace std;

auto cmp = [](const tuple<int, int>& a, const tuple<int, int>& b) {
    return get<0>(a) < get<0>(b); // 最大堆
};


priority_queue<tuple<int, int>, vector<tuple<int, int>>, decltype(cmp)> max_heap;

max_heap.push(make_tuple(3, 1));
max_heap.push(make_tuple(1, 2));
max_heap.push(make_tuple(2, 3));

      
if(max_heap.empty()==false)
auto a=max_heap.top();//pop out
max_heap.pop();
      
 ```
#### vector

```aiexclude
#include<vector>
using namespace std;

//构造
vector<int> v1;              // 空vector
vector<int> v2(5);           // 5个元素，默认值0
vector<int> v3(5, 10);       // 5个元素，值都是10
vector<int> v4 = {1, 2, 3};  // 初始化列表(C++11)
vector<int> v5(v4);          // 拷贝构造

// 下标访问（不检查边界）
int a = v[1];    // 20
// 首尾元素
int first = v.front(); // 10
int last = v.back();   // 30
// 获取底层数组指针(C++11)
int* p = v.data();

//添加
v.push_back(40);     // 末尾添加 {10,20,30,40}
v.emplace_back(50);  // 更高效的末尾添加(C++11) {10,20,30,40,50}
v.insert(v.begin()+1, 15); // 在位置1插入15 {10,15,20,30,40,50}

//删除
v.pop_back();        // 删除末尾元素 {10,15,20,30,40}LLTLTITII
v.erase(v.begin()+2);// 删除位置2元素 {10,15,30,40}
v.erase(v.begin(), v.begin()+2); // 删除前2个元素 {30,40}
v.clear();           // 清空vector {}

//大小与容量
bool empty = v.empty();  // 是否为空
size_t size = v.size();  // 元素个数
size_t cap = v.capacity(); // 当前容量
v.reserve(100);          // 预分配空间
v.resize(10);            // 改变大小，新增元素默认初始化
v.resize(15, 5);         // 改变大小，新增元素初始化为5
v.shrink_to_fit();       // 释放未使用内存(C++11)

//遍历
// 2. 迭代器遍历
for(auto it = v.begin(); it != v.end(); ++it) {
    cout << *it << " ";
}
// 1. 下标遍历
for(size_t i = 0; i < v.size(); ++i) {
    cout << v[i] << " ";
}
// 3. 范围for循环(C++11)
for(int num : v) {
    cout << num << " ";
}

//二维vector
vector<vector<int>> matrix = {
    {1, 2, 3},
    {4, 5, 6},
    {7, 8, 9}
};
// 访问元素
int val = matrix[1][2];  // 6
// 添加一行
matrix.push_back({10, 11, 12});
// 遍历二维vector
for(const auto& row : matrix) {
    for(int num : row) {
        cout << num << " ";
    }
    cout << endl;
}
```

### 算法


#### Sort


    vector<int> v = {3, 1, 4, 2};
    sort(v.begin(), v.end()); // v = {1, 2, 3, 4}，升序
    
    sort(v.begin(), v.end(), greater<int>()); // v = {4, 3, 2, 1} 降序排序
    // 或者使用 lambda
    sort(v.begin(), v.end(), [](int a, int b) { return a > b; });

#### 二分查找
    
    sort(v.begin(), v.end());
    bool found = binary_search(v.begin(), v.end(), 3); // true
#### 去重
    sort(v.begin(), v.end());//需要先排序
    v.erase(unique(v.begin(), v.end()), v.end()); // v = {1, 2, 3, 4}
#### 最大最小值计数
    auto max_it = max_element(v.begin(), v.end()); // 返回迭代器
    cout << *max_it; // 4
    
    auto min_it = min_element(v.begin(), v.end());
    cout << *min_it; // 1

    int cnt = count(v.begin(), v.end(), 2); // 1

#### 反转
    reverse(v.begin(), v.end()); // v = {4, 3, 2, 1}
#### 求和 C++17起

    #include <numeric>
    int sum = accumulate(v.begin(), v.end(), 0); // 10
#### 生成排列
    sort(v.begin(), v.end());//先排序
    do {
    for (int x : v) cout << x << " ";
    cout << endl;
    } while (next_permutation(v.begin(), v.end()));

