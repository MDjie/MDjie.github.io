---
layout: post
title: "Learning records for VUE3"
date: 2025-04-03 11:09:10 +0800
category: jekyll update
---
# VUE3
## basic grammar
***
VUE中最基础的就是vue指令，指令时一种以v-开头的特殊表达式，除了***v-on,v-slot,v-for***外，所有指令都期望一个表达式作为输入。一个指令的任务就是在输入改变时，在***dom文档中进行更新***
。指令的结构为
![表达式结构](../assets/VUE3-struction-architecture.png)
***
### 文字插值与html插入
***
`{{virable}}`could dynamically insert the content of variable into the page.`v-html="virable"` could parse variable as a html element and show it in the page.
***
### 属性绑定
***
`<div v-bind:id="dynamicId"></div>`will bind a dynamic value to the div's id attribute. it's shorthand syntax is `<div :id="dynamicId"></div>`. if the variable's name is same as the attribute, then the syntax could
be more easier:`<div :id></div>`,same as :id="id".This feature is supported only in 3,4+.
所有的数据绑定中都支持完整的 JavaScript 表达式，也可以在绑定的表达式中使用一个组件暴露的方法如：
```
<time :title="toTitleDate(date)" :datetime="date">
  {{ formatDate(date) }}
</time>
```
表达式中仅能使用有限的全局对象列表，该列表中会暴露常用的内置全局对象，比如 Math 和 Date。没有显式包含在列表中的全局对象将不能在模板内表达式中访问，例如用户附加在 window 上的属性。
***
### 动态参数
***
`<a :[attributeName]="url"> ... </a>` 这里的 attributeName 会作为一个 JavaScript 表达式被动态执行，计算得到的值会被用作最终的参数。举例来说，如果你的组件实例有一个数据属性 attributeName，其值为 "href"，那么这个绑定就等价于 v-bind:href。
动态参数中表达式的值应当是一个***字符串，或者是 null***。特殊值 null 意为***显式移除该绑定***。其他非字符串的值会触发警告。
***
### 修饰符Modifiers
***
用来表明指令的特殊执行方式。
***
### 响应式基础
#### 用ref函数声明一个响应式变量
***
ref() 接收参数，并将其包裹在一个带有 .value 属性的 ref 对象中返回：
```aiexclude
const count = ref(0)

console.log(count) // { value: 0 }
console.log(count.value) // 0
```
在组件中使用：
```aiexclude
<script>
import { ref } from 'vue'

export default {
  // `setup` 是一个特殊的钩子，专门用于组合式 API。
  setup() {
    const count = ref(0)

    // 将 ref 暴露给模板
    return {
      count
    }
  }
}
</script>

<template>
<div>{{ count }}</div>
</template>
```

在组件中使用响应式变量时，不用加`.value`。可以直接在事件监听器中改变一个ref的值。
```aiexclude
<button @click="count++">
  {{ count }}
</button>
```
***
#### 用reactive来创建一个响应式变量
***
```aiexclude

import { reactive } from 'vue'

const state = reactive({ count: 0 })
```
reactive() 将使对象本身具有响应性。

| 特性            | ref             |reactive|
|---------------|-----------------|---|
| 数据类型          | 	只接受对象/数组       |	接受任何类型的值|
| 访问方式	         | 直接访问属性	         | 需要通过 .value 访问 |
| 模板中使用         | 	直接使用           |	自动解包(无需 .value)|
| 重新赋值	         | 不能整个替换(会失去响应性)	 | 可以整个替换(保持响应性) |
| 解构/展开	        | 会失去响应性          |	保持响应性|
| TypeScript支持	 | 类型推断更自然         | 	需要泛型参数         |
***
#### 声明方法
***
用function关键词在`set up`声明一个方法,并暴露给模板以使用。
```aiexclude
import { ref } from 'vue'

export default {
  setup() {
    const count = ref(0)

    function increment() {
      // 在 JavaScript 中需要 .value
      count.value++
    }

    // 不要忘记同时暴露 increment 函数
    return {
      count,
      increment
    }
  }
}
```
当有很多变量与方法需要暴露时，可以使用`<script setup>...<script>`来自动暴露给模板。如：
```aiexclude
<script setup>
import { ref } from 'vue'

const count = ref(0)

function increment() {
  count.value++
}
</script>

<template>
  <button @click="increment">
    {{ count }}
  </button>
</template>
```
VUE的响应具有***深层次***的特性，即嵌套类型的深层被修改时，对应的模板也能动态地得到响应。
***
### ref的使用注意事项
***
- ref 作为响应式数组或原生集合类型 (如 Map) 中的元素被访问时，它不会被解包
```aiexclude
const books = reactive([ref('Vue 3 Guide')])
// 这里需要 .value
console.log(books[0].value)

const map = reactive(new Map([['count', ref(0)]]))
// 这里需要 .value
console.log(map.get('count').value)
```
- 在模板渲染上下文中，只有顶级的 ref 属性才会被解包。

在下面的例子中，count 和 object 是顶级属性，但 object.id 不是
```aiexclude
const count = ref(0)
const object = { id: ref(1) }
```
因此，这个表达式按预期工作：
```aiexclude
{{ count + 1 }}
```
...但这个不会：
```aiexclude
{{ object.id + 1 }}
```
- 如果 ref 是文本插值的最终计算值 (即 {{ }} 标签)，那么它将被解包。
```aiexclude
{{ object.id }}
```
以上非顶层属性也能正常工作。
***
### 计算属性
***
顾名思义，计算属性就是通过计算得到的一个属性。对于简单的计算，我们可以直接通过表达式的方式来获得：`<span>{{ author.books.length > 0 ? 'Yes' : 'No' }}</span>`
这样做对于一次性的计算，确实很方便。但是如果模板中有多个地方需要用到同样的计算后的结果，继续使用表达式的方式，就不得不在每个需要的地方写一次表达式。
对于这种情况。可以使用计算属性来代替：
```aiexclude
const publishedBooksMessage = computed(() => {
  return author.books.length > 0 ? 'Yes' : 'No'
})

<template>
  <p>Has published books:</p>
  <span>{{ publishedBooksMessage }}</span>
</template>
```
至此，其实也可以通过一个方法来达到相应的效果：
```aiexclude
fucntion comput(){
return author.books.length>0?'Yes':'No'
}
```
方法与计算属性有一重要区别：计算属性是***有缓存的***。方法的触发方式为调用，计算属性的触发方式为值的更新，且计算属性能基于响应式依赖被缓存。所以只要books不变，无论多少次访问publishedBooksMessage ，都会立即返回缓存的值。
计算属性还是可写的，这点不常用到，便不过多介绍了。
***getter中还可以获取到上一次的值***。
***
### 类与样式的绑定
#### 类的绑定
***
`<div :class={active:isActive}><div>`传入一个对象来动态渲染类名，当isActive为true时，active才被加入class的值中。可以扩展到多个对象属性，在对象中使用计算属性
```aiexclude
const isActive = ref(true)
const error = ref(null)

const classObject = computed(() => ({
  active: isActive.value && !error.value,
  'text-danger': error.value && error.value.type === 'fatal'
}))

<div :class="classObject"></div>
```
***
#### 样式的绑定
***
```aiexclude
const styleObject = reactive({
  color: 'red',
  fontSize: '30px'
})

<div :style="styleObject"></div>
```
同样的，如果样式对象需要更复杂的逻辑，也可以使用返回样式对象的计算属性。
***
### 条件，列表渲染

条件渲染
***
```aiexclude
<h1 v-if="bool1&&bool2">Vue is awesome!</h1>
<h1 v-else-if=bool1&&!bool2>Oh no 😢</h1>
<h1 v-else>last one</h1>
```
条件渲染也可以用在template上。v-show与v-if差不多，但是不可用在template上，其会修该display属性值。
***
列表渲染

数组渲染列表
***
```aiexclude
const items = ref([{ message: 'Foo' }, { message: 'Bar' }])

<li v-for="item in items">
  {{ item.message }}
</li>

```
在 v-for 块中可以完整地访问***父作用域内的属性和变量***。v-for 也支持使用可选的第二个参数表示当前项的***位置索引***。
***
对象列表渲染
***
```aiexclude
const myObject = reactive({
  title: 'How to do lists in Vue',
  author: 'Jane Doe',
  publishedAt: '2016-04-10'
})

<template>
<ul>
<li v-for="value in mobject")>
{{value}}
</li>
</ul>
//通过第二个参数引入key
<ul>
<li v-for="(value,key) in mobject")>
{{value}}.{{key}}
</li>
</ul>
</template>
//同理，第三个参数引入index
```
***
范围值进行列表渲染
***
```aiexclude
<span v-for="n in 10">{{ n }}</span>
```
v-for VS v-if

它们同时存在于一个节点上时，v-if 比 v-for 的优先级更高。这意味着 v-if 的条件将无法访问到 v-for 作用域内定义的变量别名。
```aiexclude
<!--
 这会抛出一个错误，因为属性 todo 此时
 没有在该实例上定义
-->
<li v-for="todo in todos" v-if="!todo.isComplete">
  {{ todo.name }}
</li>
```
解决方法：在外先包装一层`<template>`再在其上使用`v-for`可以解决这个问题 (这也更加明显易读)

```aiexclude
<template v-for="todo in todos">
  <li v-if="!todo.isComplete">
    {{ todo.name }}
  </li>
</template>
```
***
根据数组状态渲染：
***
```aiexclude
<div v-for="item in items" :key="item.id">
  <!-- 内容 -->
</div>
```
key 绑定的值期望是一个基础类型的值，例如字符串或 number 类型。不要用对象作为 v-for 的 key。
***
### 事件处理
***
`v-on:click.prevent="count++"`可以简单编写一个点击响应逻辑。但响应逻辑复杂时，需要构造方法来处理
```aiexclude
const name = ref('Vue.js')

function greet(event) {
  alert(`Hello ${name.value}!`)
  // `event` 是 DOM 原生事件
  if (event) {
    alert(event.target.tagName)
  }
}

<!-- `greet` 是上面定义过的方法名 -->
<button @click="greet">Greet</button>
```
方法事件处理器会自动接收原生 DOM 事件并触发执行。在上面的例子中，我们能够通过被触发事件的 event.target 访问到该 DOM 元素。
***
### 表单绑定
***
具体看[表单绑定](https://cn.vuejs.org/guide/essentials/forms)。
***
### 侦听器
***
用于在数据变化时，执行非计算性复杂任务（发送请求，更改DOM）。

    // 可以直接侦听一个 ref
    watch(question, async (newQuestion, oldQuestion) => {
    if (newQuestion.includes('?')) {
    loading.value = true
    answer.value = 'Thinking...'
    try {
    const res = await fetch('https://yesno.wtf/api')
    answer.value = (await res.json()).answer
    } catch (error) {
    answer.value = 'Error! Could not reach the API. ' + error
    } finally {
    loading.value = false
    }
    }
    })

watch的第一个参数可以是一个ref(包括计算属性)，一个响应式对象（reactive），一个getter函数，或多个数据源组成的数组

    const x = ref(0)
    const y = ref(0)
    
    // 单个 ref
    watch(x, (newX) => {
    console.log(`x is ${newX}`)
    })
    
    // getter 函数
    watch(
    () => x.value + y.value,
    (sum) => {
    console.log(`sum of x + y is: ${sum}`)
    }
    )
    
    // 多个来源组成的数组
    watch([x, () => y.value], ([newX, newY]) => {
    console.log(`x is ${newX} and y is ${newY}`)
    })

不能直接侦听响应式对象的属性值

    const obj = reactive({ count: 0 })
    // 错误，因为 watch() 得到的参数是一个 number
    watch(obj.count, (count) => {
    console.log(`Count is: ${count}`)
    })

直接给 watch() 传入一个响应式对象，会隐式地创建一个深层侦听器——该回调函数在所有嵌套的变更时都会被触发

    const obj = reactive({ count: 0 })
    
    watch(obj, (newValue, oldValue) => {
    // 在嵌套的属性变更时触发
    // 注意：`newValue` 此处和 `oldValue` 是相等的
    // 因为它们是同一个对象！
    })
    
    obj.count++

***即时回调***的侦听器，即立即执行一遍回调。举例来说，我们想请求一些初始数据，然后在相关状态更改时重新请求数据。

    watch(
    source,
    (newValue, oldValue) => {
    // 立即执行，且当 `source` 改变时再次执行
    },
    { immediate: true }
    )

***一次性***侦听器：回调只在源变化时触发一次

    watch(
    source,
    (newValue, oldValue) => {
    // 当 `source` 变化时，仅触发一次
    },
    { once: true }
    )

***watchEffect***：

你想简化代码，自动收集依赖

你需要在初始化时立即执行一次

你的回调依赖多个响应式状态，但你不关心具体是哪个变化触发的

    watchEffect(() => {
    console.log(`count is ${count.value} and another is ${anotherRef.value}`)
    // 会自动追踪 count.value 和 anotherRef.value 作为依赖
    })

***异步处理时***的侦听：
若需要的响应式操作包括有异步请求时，会出现一下情况：异步请求结果还未完成，即上一个变化所触发的回调还未完成时，下一个变化已经发生。此时表明上一个回调的结果其实已经失效了，所以希望能够取消过时的请求。

可以使用***onWatcherCleanup***来注册清理函数。

    import { watch, onWatcherCleanup } from 'vue'
    
    watch(id, (newId) => {
    const controller = new AbortController()
    
    fetch(`/api/${newId}`, { signal: controller.signal }).then(() => {
    // 回调逻辑
    })
    
    onWatcherCleanup(() => {
    // 终止过期请求
    controller.abort()
    })
    })

请注意，onWatcherCleanup 仅在 ***Vue 3.5+*** 中支持，并且必须在 watchEffect 效果函数或 watch 回调函数的***同步执行期间***调用：你不能在异步函数的 await 语句之后调用它。

3.5之前，onCleanup 函数还作为***第三个参数***传递给侦听器回调，以及 watchEffect 作用函数的***第一个参数***：
    
    watch(id, (newId, oldId, onCleanup) => {
    // ...
    onCleanup(() => {
    // 清理逻辑
    })
    })
    
    watchEffect((onCleanup) => {
    // ...
    onCleanup(() => {
    // 清理逻辑
    })
    })
此外，通过函数参数传递的 onCleanup 与侦听器实例相绑定，因此不受 onWatcherCleanup 的同步限制。

***回调的触发时机***：

默认情况下，侦听器回调会在***父组件更新 (如有) 之后、所属组件的 DOM 更新之前***被调用。这意味着如果你尝试在侦听器回调中访问所属组件的 DOM，那么 DOM 将处于更新前的状态。
如果想在侦听器回调中能访问被 ***Vue 更新之后***的所属组件的 DOM，你需要指明 flush: 'post' 选项：

    watch(source, callback, {
    flush: 'post'
    })
    
    watchEffect(callback, {
    flush: 'post'
    })

后置刷新的 watchEffect() 有个更方便的别名***watchPostEffect()***：

    import { watchPostEffect } from 'vue'
    
    watchPostEffect(() => {
    /* 在 Vue 更新后执行 */
    })
***同步侦听器***：它会在 Vue 进行任何更新之前触发

    watch(source, callback, {
    flush: 'sync'
    })
    
    watchEffect(callback, {
    flush: 'sync'
    })
同步触发的 watchEffect() 有个更方便的别名***watchSyncEffect()***：

    import { watchSyncEffect } from 'vue'
    
    watchSyncEffect(() => {
    /* 在响应式数据变化时同步执行 */
    })
在`setup()`或 `<script setup>`中用同步语句创建的侦听器，会自动绑定到宿主组件实例上，并且会在***宿主组件卸载时自动停止***。因此，在大多数情况下，你无需关心怎么停止一个侦听器。
一个关键点是，***侦听器必须用同步语***。如果用***异步回调***创建一个侦听器，那么它不会绑定到当前组件上，你必须手动停止它，以防内存泄漏。

    <script setup>
    import { watchEffect } from 'vue'
    
    // 它会自动停止
    watchEffect(() => {})
    
    // ...这个则不会！
    setTimeout(() => {
      watchEffect(() => {})
    }, 100)
    </script>

要手动停止一个侦听器，请调用***watch 或 watchEffect*** 返回的函数： 

    const unwatch = watchEffect(() => {})
    // ...当该侦听器不再需要时
    unwatch()
***
### DOM引用
***
直接访问底层 DOM 元素。要实现这一点，我们可以使用特殊的 ref attribute。

    <input ref="input">

要在组合式 API 中获取引用，我们可以使用辅助函数 useTemplateRef()[^>3.5]：

    <script setup>
    import { useTemplateRef, onMounted } from 'vue'
    
    // 第一个参数必须与模板中的 ref 值匹配
    const input = useTemplateRef('my-input')
    
    onMounted(() => {
      input.value.focus()
    })
    </script>
    
    <template>
      <input ref="my-input" />
    </template>

***在3.5之前***,我们需要声明一个与模板里 ref attribute 匹配的引用：

    <script setup>
    import { ref, onMounted } from 'vue'
    
    // 声明一个 ref 来存放该元素的引用
    // 必须和模板里的 ref 同名
    const input = ref(null)
    
    onMounted(() => {
      input.value.focus()
    })
    </script>
    
    <template>
      <input ref="input" />
    </template>

***组件也能被引用***。
***
### 组件基础
***
通过`<script setup>`，导入的组件都在模板中直接可用。

***传递props***

    defineProps(['title'])
一个组件可以有***任意多***的 props，默认情况下，所有 prop 都接受***任意类型的值***。

***监听事件***
将子组件的事件传递到父组件进行处理。

    <!-- 子组件.vue -->
    <script setup>
    defineEmits(['event'])
    </script>
    <template>
      <div class="blog-post">
        <h4>{{ title }}</h4>
        <button @click="$emit('event')">Enlarge text</button>
      </div>
    </template>
    
    <!-- 父组件.vue-->
    <template>
    <子组件
      ...
      @event="handleMethod"
     />
    </template>

***插槽***

    <!-- 子组件.vue -->
    <template>
      <div class="blog-post">
        <slot/>
      </div>
    </template>

***动态组件***
用`<component :is='...'>`实现，被传给 :is 的值可以是以下几种：

- 被注册的组件名
- 导入的组件对象
***
### 组件生命周期
***
![组件生命周期](../assets/VUE3-component-life-period.png)
***常用钩子函数***
- onmounted()
- onupdated()
- onunmounted()
***

### 深入组件
***
***组件上的v-model***
实现子组件上的双向绑定，可以用defineModel来实现[^>3.4]。

    <MyComponent
    v-model:first-name="first"
    v-model:last-name="last"
    />
    
    <!-- MyComponent.vue -->
    <script setup>
        const firstName = defineModel('firstName')
        const lastName = defineModel('lastName')
    </script>
    
    <template>
      <input type="text" v-model="firstName" />
      <input type="text" v-model="lastName" />
    </template>

如果需要额外的prop选项，应该在model名称之后传递。`const title = defineModel('title', { required: true })`
***

***透传Attribute***
***
也称fall-through attribute,即向下坠落的属性。具体指的是父组件向子组件传入但未在子组件的***props，emit***中声明的属性或v-on事件。
若子组件***只有一个根元素***，这些属性或事件会自动依附在根元素上。若根元素也是一个组件，且孙组件中也为声明该属性或事件，且也只有一个根元素，则该属性或事件也还是会下坠到孙组件的根元素上。

若子孙组件的根元素的对应属性或事件有值，则会合并透传属性或事件的值。

可以禁用这种下沉：

    <script setup>
    defineOptions({
      inheritAttrs: false
    })
    // ...setup 逻辑
    </script>

属性与事件在模板的表达式中直接用`$attrs`访问到。如：`<span>Fallthrough attribute: {{ $attrs['attribute-name'] }}</span> `，`<button @click=$sttrs.onClick/>`。其中包含的出props与emit中声明的参数与事件之外的参数
与事件。

在禁用了自动下沉之后，可以在子组件中的非根元素中使用显示绑定来绑定传入参数或事件：
` <button class="btn" v-bind="$attrs">Click Me</button>`
没有参数的 v-bind 会将一个对象的***所有属性***都作为 attribute 应用到目标元素上。

和单根节点组件有所不同，***有着多个根节点***的组件没有自动 attribute 透传行为。如果 $attrs 没有被显式绑定，将会抛出一个运行时警告。

可以在 &lt;script setup> 中使用 ***useAttrs()*** API 来访问一个组件的所有透传 attribute：

    <script setup>
    import { useAttrs } from 'vue'
    
    const attrs = useAttrs()
    </script>
***
***插槽进阶***
***
除了简单使用外，还能进行进行利用插槽进行一些特殊的操作

- 插槽内容可以是任意合法的模板内容，不局限于文本。例如我们可以传入多个元素，甚至是组件。

      <FancyButton><!-- FancyButton是一个子组件 -->
      <span style="color:red">Click me!</span>
      <AwesomeIcon name="plus" />
      </FancyButton>
- 插槽内容可以访问插槽输入组件（父组件）的数据，不能当问插槽输出组件（子组件）的数据。


- 默认内容


    <button type="submit">
      <slot>
        Submit <!-- 默认内容 -->
      </slot>
    </button>
- 具名插槽
有时子组件中有多个插槽，此时需要为每个插槽命名加以区分，未命名的插槽默认名为***default***。


    <div class="container">
      <header>
        <slot name="header"></slot>
      </header>
      <main>
        <slot></slot>
      </main>
      <footer>
        <slot name="footer"></slot>
      </footer>
    </div>

父组件在进行传入时：


    <BaseLayout>
      <template #header>
        <h1>Here might be a page title</h1>
      </template>
    
    <template #default>
    <p>A paragraph for the main content.</p>
    <p>And another one.</p>
    </template>
    
    <template #footer>
    <p>Here's some contact info</p>
    </template>
    </BaseLayout>
- 条件插槽

有时需要根据***内容是否被传入了插槽***来渲染某些内容。


    <template>
      <div class="card">
        <div v-if="$slots.header" class="card-header">
          <slot name="header" />
        </div>
    
        <div v-if="$slots.default" class="card-content">
          <slot />
        </div>
        
        <div v-if="$slots.footer" class="card-footer">
          <slot name="footer" />
        </div>
      </div>
    </template>

- 作用域插槽
实现插槽访问子组件数据效果
- 依赖注入

实现跨层数据传递，当祖父组件想要传递数据给孙子组件时，如果使用props属性，必须先将数据传给子组件然后子组件再将数据逐层传递下去，显然这样比较麻烦。
可以使用***provide***和***inject***解决这一prop逐级传递问题。

在祖先组件中提供传递参数：

    <script setup>
    import { provide } from 'vue'
    
    provide(/* 注入名 */ 'message', /* 值 */ 'hello!')
    </script>

在子孙结点中注入传递参数：

    <script setup>
    import { inject } from 'vue'
    
    const message = inject('message')
    </script>

如果提供的值是一个 ref，注入进来的会是该 ref 对象，而不会自动解包为其内部的值。这使得注入方组件能够通过 ref 对象保持了和供给方的***响应性链接***。
当提供 / 注入响应式的数据时，建议尽可能将任何对响应式状态的***变更都保持在供给方组件***中。

    <!-- 在供给方组件内 -->
    <script setup>
    import { provide, ref } from 'vue'
    
    const location = ref('North Pole')
    
    function updateLocation() {
      location.value = 'South Pole'
    }
    
    provide('location', {
      location,
      updateLocation
    })
    </script>

    <!-- 在注入方组件 -->
    <script setup>
    import { inject } from 'vue'
    
    const { location, updateLocation } = inject('location')
    </script>
    
    <template>
      <button @click="updateLocation">{{ location }}</button>
    </template>



想确保提供的数据不能被注入方的组件更改，你可以使用 readonly() 来包装提供的值。


    <script setup>
    import { ref, provide, readonly } from 'vue'
    
    const count = ref(0)
    provide('read-only-count', readonly(count))
    </script>
### 路由
***
***路由与动态组件的区别***
动态组件通过事件机制对DOM进行更改，取消挂载旧组件，挂载新组件，从而实现切换。
路由是由网址的改变而实现的切换。

简单路由可由***haschange***事件与***动态组件***实现。

    <script setup>
    import { ref, computed } from 'vue'
    import Home from './Home.vue'
    import About from './About.vue'
    import NotFound from './NotFound.vue'
    const routes = {
      '/': Home,
      '/about': About
    }
    const currentPath = ref(window.location.hash)
    window.addEventListener('hashchange', () => {
      currentPath.value = window.location.hash
    })
    const currentView = computed(() => {
      return routes[currentPath.value.slice(1) || '/'] || NotFound
    })
    </script>
    <template>
      <a href="#/">Home</a> |
      <a href="#/about">About</a> |
      <a href="#/non-existent-path">Broken Link</a>
      <component :is="currentView" />
    </template>
***
***复杂路由：Vue Router组件***
***
***引入router***

    npm install vue-router@4 //安装

    <!-- main.js-->
    import { createApp } from 'vue'
    import router from './router'
    import App from './app.vue'
    
    createApp(App)
    .use(router)
    .mount('#app')
    
    <!--./router.js -->
    import { createMemoryHistory, createRouter } from 'vue-router'
    
    import HomeView from './HomeView.vue'
    import AboutView from './AboutView.vue'
    
    const routes = [
    { path: '/', component: HomeView },
    { path: '/about', component: AboutView },
    ]
    
    const router = createRouter({
    history: createMemoryHistory(),
    routes,
    })
    
    export default router

    <!-- APP.vue-->
    <template>
      <h1>Hello App!</h1>
      <p>
        <strong>Current route path:</strong> {{ $route.fullPath }}
      </p>
      <nav>
        <RouterLink to="/">Go to Home</RouterLink>
        <RouterLink to="/about">Go to About</RouterLink>
      </nav>
      <main>
        <RouterView />
      </main>
    </template>
***$route.fullPath***可用于访问当前路由。

在router.js中：

- routes定义了一组路由到组件的映射。
- history选项控制了路由和 URL 路径是如何双向映射的。例子中的***createMemoryHistory***表示完全忽视浏览器的URL
而使用自己内部的URL。

在main.js中引入router.js并进行注册。

在组件中使用router进行***跳转***时需要访问router，组合时API的使用方法为：使用***useRoute、useRouter***

    <script setup>
    import { computed } from 'vue'
    import { useRoute, useRouter } from 'vue-router'
    
    const router = useRouter()
    const route = useRoute()
    
    const search = computed({
      get() {
        return route.query.search ?? ''
      },
      set(search) {
        router.replace({ query: { search } })
      }
    })
    </script>
***

***动态路由***
***
将多个url匹配到一个组件

    import User from './User.vue'
    
    // 这些都会传递给 `createRouter`
    const routes = [
    // 动态字段以冒号开始
    { path: '/users/:id', component: User },
    ]

    <template>
      <div>
        <!-- 当前路由可以通过 $route 在模板中访问 -->
        User {{ $route.params.id }}
      </div>
    </template>
像 /users/johnny 和 /users/jolyne 这样的 URL 都会映射到同一个路由。当一个路由被匹配时，它的***params***的值将在每个组件中以***route.params***的形式暴露出来。
***若设置有多个路径参数***，它们会映射到 $route.params 上的相应字段。如：

|匹配模式|匹配路径|route.params|
|---|---|---|
|/users/:username|/users/eduardo|{ username: 'eduardo' }|
|/users/:username/posts/:postId	|/users/eduardo/posts/123	|{ username: 'eduardo', postId: '123' }|

route 对象还公开了***其他有用的信息***，如 route.query（如果 URL 中存在参数）、route.hash 等。
***
***路由变化事件***
***
用***watch*** 来监视路由参数实现响应：

    watch(() => route.params.id, (newId, oldId) => {
    // 对路由变化做出响应...
    })

常规参数只能不匹配url的片段之间的字符串，即/之间的字符串。若想匹配任意路径，可在路径参数后面的括号中加如***正则表达式***。

    const routes = [
    // 将匹配所有内容并将其放在 `route.params.pathMatch` 下
    { path: '/:pathMatch(.*)*', name: 'NotFound', component: NotFound },
    // 将匹配以 `/user-` 开头的所有内容，并将其放在 `route.params.afterUser` 下
    { path: '/user-:afterUser(.*)', component: UserGeneric },
    ]

***
***路由的匹配语法***
***
要看的时候去往
[路由匹配语法](https://router.vuejs.org/zh/guide/essentials/route-matching-syntax.html)。
***剩余部分见官网***
***



### 状态管理
#### 简单状态管理
***
构建store.js来管理状态。

    // store.js
    import { reactive } from 'vue'
    
    export const store = reactive({
    count: 0,
    increment() {
    this.count++
    }
        })

    <!-- ComponentA.vue -->
    <script setup>
    import { store } from './store.js'
    </script>
    
    <template>From A: {{ store.count }}</template>

      <template>
      <button @click="store.increment()">
        From B: {{ store.count }}
      </button>
    </template>

除了这里用到的单个***响应式对象***作为一个 store 之外，还可以使用其他响应式 API 例如 ***ref***或是 ***computed***，或是甚至通过一个***组合式函数***来返回一个全局状态
***
***复杂状态插件：pinia***
***
需要时前往[pinia](https://pinia.vuejs.org/zh/)
***


[^>3.5]:VUE版本
[^>3.4]:VUE版本
[^>3.3]:VUE版本
[^>3.2]:VUE版本
[^>3.1]:VUE版本
